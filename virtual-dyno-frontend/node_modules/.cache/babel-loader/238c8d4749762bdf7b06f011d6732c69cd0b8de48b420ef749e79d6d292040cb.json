{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tyler\\\\OneDrive\\\\Desktop\\\\VirtualDyno\\\\virtual-dyno-frontend\\\\src\\\\VirtualDyno.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport './VirtualDyno.css';\n\n// Virtual Dyno Room that processes REAL user CSV files\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VirtualDyno = () => {\n  _s();\n  var _dynoResults$peaks, _dynoResults$peaks2, _dynoResults$peaks3, _dynoResults$peaks4, _dynoTypes$dynoResult, _dynoResults$settings, _dynoResults$settings2, _dynoResults$settings3, _dynoResults$peaks5, _dynoResults$peaks6, _dynoResults$peaks7, _dynoResults$peaks8, _dynoResults$peaks9, _dynoResults$peaks0, _dynoResults$peaks1, _dynoTypes$dynoResult2, _dynoResults$settings4;\n  const [csvFile, setCsvFile] = useState(null);\n  const [csvData, setCsvData] = useState([]);\n  const [dynoResults, setDynoResults] = useState(null);\n  const [isRunning, setIsRunning] = useState(false);\n  const [currentDataPoint, setCurrentDataPoint] = useState(0);\n  const [selectedCar, setSelectedCar] = useState('mazdaspeed3');\n  const [virtualDynoSettings, setVirtualDynoSettings] = useState({\n    dynoType: 'mustang_md250',\n    temperature: 75,\n    humidity: 45,\n    altitude: 500\n  });\n  const fileInputRef = useRef(null);\n\n  // Dyno characteristics (no heat soak)\n  const dynoTypes = {\n    mustang_md250: {\n      name: \"Mustang MD250 (Load Bearing)\",\n      correction: 1.0,\n      variance: 0.02\n    },\n    dynojet_248c: {\n      name: \"DynoJet 248C (Inertial)\",\n      correction: 1.15,\n      variance: 0.03\n    },\n    awd_dyno: {\n      name: \"AWD Dyno (All-Wheel)\",\n      correction: 0.95,\n      variance: 0.04\n    }\n  };\n\n  // Parse uploaded CSV file\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    setCsvFile(file);\n    const reader = new FileReader();\n    reader.onload = e => {\n      const csv = e.target.result;\n      const lines = csv.split('\\n');\n      const headers = lines[0].split(',').map(h => h.trim());\n      const data = lines.slice(1).filter(line => line.trim().length > 0).map(line => {\n        const values = line.split(',');\n        const row = {};\n        headers.forEach((header, index) => {\n          var _values$index;\n          row[header] = (_values$index = values[index]) === null || _values$index === void 0 ? void 0 : _values$index.trim();\n        });\n        return row;\n      }).filter(row => {\n        // Filter for valid dyno data (like your C# backend does)\n        const rpm = parseInt(row['RPM (RPM)'] || row['RPM'] || row['Engine Speed']);\n        const maf = parseFloat(row['Mass Airflow (g/s)'] || row['MAF'] || row['Mass Airflow']);\n        const load = parseFloat(row['Calculated Load (Load)'] || row['Load'] || row['Engine Load']);\n        return rpm > 2000 && maf > 5 && load > 0.15;\n      });\n      setCsvData(data);\n      console.log(`Loaded ${data.length} valid data points from CSV`);\n    };\n    reader.readAsText(file);\n  };\n\n  // Send to your C# backend and return results\n  const sendToBackend = async () => {\n    if (!csvFile) return null;\n    try {\n      const formData = new FormData();\n      formData.append('File', csvFile);\n      formData.append('CarPresetKey', selectedCar);\n      formData.append('Weight', '3200');\n      formData.append('Gear', '4');\n      formData.append('Notes', `Virtual dyno: ${virtualDynoSettings.dynoType}, ${virtualDynoSettings.temperature}°F`);\n      formData.append('IsPublic', 'false');\n      console.log('Sending CSV to C# backend...');\n      const response = await fetch('http://localhost:5038/api/dyno/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        const backendResults = await response.json();\n        console.log('✅ C# Backend Results:', backendResults);\n        return backendResults;\n      } else {\n        console.error('Backend API error:', response.status, response.statusText);\n        return null;\n      }\n    } catch (error) {\n      console.error('Failed to connect to C# backend:', error);\n      return null;\n    }\n  };\n\n  // Run virtual dyno using YOUR C# backend for calculations\n  const runVirtualDyno = async () => {\n    if (!csvData.length) {\n      alert('Please upload a CSV file first!');\n      return;\n    }\n    setIsRunning(true);\n    setCurrentDataPoint(0);\n    try {\n      var _processedData$find, _processedData$find2, _backendResults$peaks, _backendResults$peaks2, _backendResults$peaks3, _backendResults$peaks4;\n      // 1. Send real CSV to YOUR C# backend for processing\n      const backendResults = await sendToBackend();\n      if (!backendResults) {\n        alert('Could not connect to backend API. Make sure your C# API is running on localhost:5038');\n        setIsRunning(false);\n        return;\n      }\n\n      // 2. Get the official datapoints from YOUR backend\n      const detailResponse = await fetch(`http://localhost:5038/api/dyno/runs/${backendResults.id}`);\n      if (!detailResponse.ok) {\n        console.error('Failed to get detailed run data:', detailResponse.status);\n        setIsRunning(false);\n        return;\n      }\n      const detailData = await detailResponse.json();\n\n      // 3. Apply virtual dyno characteristics to YOUR calculated results\n      const processedData = (detailData.dataPoints || []).map((point, index) => {\n        // Use YOUR backend's calculations as base, apply dyno characteristics\n        const dyno = dynoTypes[virtualDynoSettings.dynoType];\n\n        // Environmental effects\n        const tempCorrection = Math.sqrt(537.67 / (virtualDynoSettings.temperature + 459.67));\n        const humidityCorrection = 1 - virtualDynoSettings.humidity / 100 * 0.047;\n        const altitudeCorrection = 1 - virtualDynoSettings.altitude * 0.000035;\n        const envCorrection = tempCorrection * humidityCorrection * altitudeCorrection;\n\n        // Dyno type correction and variance\n        const variance = 1 + (Math.random() - 0.5) * 2 * dyno.variance;\n        return {\n          rpm: point.rpm || point.Rpm || 0,\n          hp: Math.round((point.horsepower || point.Horsepower || 0) * envCorrection * dyno.correction * variance * 10) / 10,\n          torque: Math.round((point.torque || point.Torque || 0) * envCorrection * variance * 10) / 10,\n          boost: point.boost || point.Boost || 0,\n          maf: point.massAirflow || point.MassAirflow || 0,\n          load: point.load || point.Load || 0,\n          backendHP: point.horsepower || point.Horsepower || 0,\n          backendTorque: point.torque || point.Torque || 0\n        };\n      });\n\n      // 4. Animate the virtual dyno run\n      for (let i = 0; i < processedData.length; i++) {\n        setCurrentDataPoint(i);\n        if (i < processedData.length) {\n          setDynoResults(prev => ({\n            ...prev,\n            currentPoint: processedData[i]\n          }));\n        }\n        await new Promise(resolve => setTimeout(resolve, 150));\n      }\n\n      // 5. Calculate final peaks from virtual dyno\n      const peaks = {\n        maxHP: processedData.length > 0 ? Math.max(...processedData.map(d => d.hp || 0)) : 0,\n        maxTorque: processedData.length > 0 ? Math.max(...processedData.map(d => d.torque || 0)) : 0,\n        maxHPRpm: ((_processedData$find = processedData.find(d => d.hp === Math.max(...processedData.map(p => p.hp || 0)))) === null || _processedData$find === void 0 ? void 0 : _processedData$find.rpm) || 0,\n        maxTorqueRpm: ((_processedData$find2 = processedData.find(d => d.torque === Math.max(...processedData.map(p => p.torque || 0)))) === null || _processedData$find2 === void 0 ? void 0 : _processedData$find2.rpm) || 0,\n        backendMaxHP: ((_backendResults$peaks = backendResults.peaks) === null || _backendResults$peaks === void 0 ? void 0 : _backendResults$peaks.maxHorsepower) || 0,\n        backendMaxTorque: ((_backendResults$peaks2 = backendResults.peaks) === null || _backendResults$peaks2 === void 0 ? void 0 : _backendResults$peaks2.maxTorque) || 0,\n        backendMaxHPRpm: ((_backendResults$peaks3 = backendResults.peaks) === null || _backendResults$peaks3 === void 0 ? void 0 : _backendResults$peaks3.maxHorsepowerRpm) || 0,\n        backendMaxTorqueRpm: ((_backendResults$peaks4 = backendResults.peaks) === null || _backendResults$peaks4 === void 0 ? void 0 : _backendResults$peaks4.maxTorqueRpm) || 0\n      };\n      setDynoResults({\n        processedData,\n        peaks,\n        settings: virtualDynoSettings,\n        fileName: csvFile.name,\n        backendResults\n      });\n    } catch (error) {\n      console.error('Error running virtual dyno:', error);\n      alert('Error connecting to backend API. Make sure your C# API is running.');\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  // Reset dyno results\n  const resetDyno = () => {\n    setDynoResults(null);\n    setCurrentDataPoint(0);\n  };\n  const currentData = (dynoResults === null || dynoResults === void 0 ? void 0 : dynoResults.currentPoint) || (dynoResults === null || dynoResults === void 0 ? void 0 : dynoResults.processedData) && dynoResults.processedData[currentDataPoint];\n\n  // Format chart data\n  const chartData = dynoResults !== null && dynoResults !== void 0 && dynoResults.processedData ? dynoResults.processedData.map(point => ({\n    rpm: point.rpm,\n    Horsepower: point.hp,\n    Torque: point.torque,\n    Boost: point.boost\n  })) : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"virtual-dyno-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"virtual-dyno-title\",\n      children: \"\\uD83C\\uDFC1 Virtual Dyno Experience - Powered by Your C# Backend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"backend-status-alert\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"\\u2699\\uFE0F Make sure your C# backend is running:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"cd VirtualDyno.API && dotnet run\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 67\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dyno-main-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `file-upload-section ${csvFile ? 'has-file' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"file-upload-title\",\n          children: \"\\uD83D\\uDCC1 Upload Your Datalog\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".csv\",\n          onChange: handleFileUpload,\n          ref: fileInputRef,\n          className: \"hidden\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => fileInputRef.current.click(),\n          className: \"file-upload-button\",\n          children: csvFile ? '✅ Change File' : '📂 Select CSV File'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), csvFile && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"File:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 18\n            }, this), \" \", csvFile.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Data Points:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 18\n            }, this), \" \", csvData.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"settings-title\",\n          children: \"\\uD83D\\uDE97 Vehicle Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"settings-label\",\n          children: \"Select Car:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedCar,\n          onChange: e => {\n            setSelectedCar(e.target.value);\n            setDynoResults(null);\n            resetDyno();\n          },\n          className: \"settings-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"mazdaspeed3\",\n            children: \"Mazdaspeed3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"wrx\",\n            children: \"Subaru WRX\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gti\",\n            children: \"VW GTI\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"focus_st\",\n            children: \"Ford Focus ST\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"settings-title\",\n          children: \"\\uD83D\\uDD27 Dyno Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"settings-label\",\n          children: \"Dyno Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: virtualDynoSettings.dynoType,\n          onChange: e => setVirtualDynoSettings(prev => ({\n            ...prev,\n            dynoType: e.target.value\n          })),\n          className: \"settings-select\",\n          children: Object.entries(dynoTypes).map(([key, dyno]) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: key,\n            children: dyno.name\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"settings-label\",\n          children: [\"Temperature: \", virtualDynoSettings.temperature, \"\\xB0F\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"50\",\n          max: \"110\",\n          value: virtualDynoSettings.temperature,\n          onChange: e => setVirtualDynoSettings(prev => ({\n            ...prev,\n            temperature: parseInt(e.target.value)\n          })),\n          className: \"settings-range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"settings-label\",\n          children: [\"Humidity: \", virtualDynoSettings.humidity, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"10\",\n          max: \"90\",\n          value: virtualDynoSettings.humidity,\n          onChange: e => setVirtualDynoSettings(prev => ({\n            ...prev,\n            humidity: parseInt(e.target.value)\n          })),\n          className: \"settings-range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `dyno-display-panel ${isRunning ? 'running' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"dyno-display-title\",\n          children: isRunning ? 'PROCESSING...' : 'Virtual Dyno'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this), isRunning && currentData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"live-dyno-reading\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"live-rpm\",\n            children: [currentData.rpm || 0, \" RPM\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"live-power\",\n            children: [(currentData.hp || 0).toFixed(1), \" HP | \", (currentData.torque || 0).toFixed(1), \" lb-ft\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"live-details\",\n            children: [\"Boost: \", (currentData.boost || 0).toFixed(1), \" PSI | MAF: \", (currentData.maf || 0).toFixed(1), \" g/s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              style: {\n                width: `${csvData.length > 0 ? currentDataPoint / csvData.length * 100 : 0}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this), dynoResults && !isRunning && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"results-title\",\n            children: \"\\uD83C\\uDFC6 Virtual Dyno Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"virtual-results\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [(((_dynoResults$peaks = dynoResults.peaks) === null || _dynoResults$peaks === void 0 ? void 0 : _dynoResults$peaks.maxHP) || 0).toFixed(1), \" HP\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 20\n              }, this), \" @ \", ((_dynoResults$peaks2 = dynoResults.peaks) === null || _dynoResults$peaks2 === void 0 ? void 0 : _dynoResults$peaks2.maxHPRpm) || 'N/A', \" RPM\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [(((_dynoResults$peaks3 = dynoResults.peaks) === null || _dynoResults$peaks3 === void 0 ? void 0 : _dynoResults$peaks3.maxTorque) || 0).toFixed(1), \" lb-ft\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 20\n              }, this), \" @ \", ((_dynoResults$peaks4 = dynoResults.peaks) === null || _dynoResults$peaks4 === void 0 ? void 0 : _dynoResults$peaks4.maxTorqueRpm) || 'N/A', \" RPM\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"results-meta\",\n              children: [\"Dyno: \", ((_dynoTypes$dynoResult = dynoTypes[(_dynoResults$settings = dynoResults.settings) === null || _dynoResults$settings === void 0 ? void 0 : _dynoResults$settings.dynoType]) === null || _dynoTypes$dynoResult === void 0 ? void 0 : _dynoTypes$dynoResult.name) || 'Unknown', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 87\n              }, this), \"Temp: \", ((_dynoResults$settings2 = dynoResults.settings) === null || _dynoResults$settings2 === void 0 ? void 0 : _dynoResults$settings2.temperature) || 'N/A', \"\\xB0F, Humidity: \", ((_dynoResults$settings3 = dynoResults.settings) === null || _dynoResults$settings3 === void 0 ? void 0 : _dynoResults$settings3.humidity) || 'N/A', \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this), ((_dynoResults$peaks5 = dynoResults.peaks) === null || _dynoResults$peaks5 === void 0 ? void 0 : _dynoResults$peaks5.backendMaxHP) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"backend-results\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\uD83E\\uDDEE Your C# Backend Results:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 63\n            }, this), (dynoResults.peaks.backendMaxHP || 0).toFixed(1), \" HP @ \", ((_dynoResults$peaks6 = dynoResults.peaks) === null || _dynoResults$peaks6 === void 0 ? void 0 : _dynoResults$peaks6.backendMaxHPRpm) || 'N/A', \" RPM\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 124\n            }, this), (dynoResults.peaks.backendMaxTorque || 0).toFixed(1), \" lb-ft @ \", ((_dynoResults$peaks7 = dynoResults.peaks) === null || _dynoResults$peaks7 === void 0 ? void 0 : _dynoResults$peaks7.backendMaxTorqueRpm) || 'N/A', \" RPM\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 135\n            }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n              children: \"(Before virtual dyno effects)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 13\n        }, this), !isRunning && !dynoResults && csvData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-ready\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Ready to Run!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"CSV loaded with \", csvData.length, \" data points\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Click \\\"START VIRTUAL DYNO\\\" to process with your C# backend\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 13\n        }, this), !isRunning && !dynoResults && csvData.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-waiting\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Upload a CSV file to get started\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: runVirtualDyno,\n        disabled: !csvData.length || isRunning,\n        className: \"btn-primary\",\n        children: isRunning ? '🏃 PROCESSING...' : `🚀 START VIRTUAL DYNO`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this), dynoResults && !isRunning && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetDyno,\n        className: \"btn-tertiary\",\n        children: \"\\uD83D\\uDD04 Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this), dynoResults && !isRunning && chartData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dyno-chart-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"chart-title\",\n        children: \"\\uD83D\\uDCCA Dyno Chart Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 400,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: chartData,\n            margin: {\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 60\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\",\n              stroke: \"#444\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"rpm\",\n              stroke: \"#ccc\",\n              label: {\n                value: 'RPM',\n                position: 'insideBottom',\n                offset: -5,\n                style: {\n                  textAnchor: 'middle',\n                  fill: '#ccc'\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              stroke: \"#ccc\",\n              label: {\n                value: 'HP / Torque',\n                angle: -90,\n                position: 'insideLeft',\n                style: {\n                  textAnchor: 'middle',\n                  fill: '#ccc'\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              contentStyle: {\n                backgroundColor: '#2a2a2a',\n                border: '1px solid #555',\n                borderRadius: '8px',\n                color: '#fff'\n              },\n              formatter: (value, name) => [`${Number(value).toFixed(1)} ${name === 'Horsepower' ? 'HP' : name === 'Torque' ? 'lb-ft' : 'PSI'}`, name],\n              labelFormatter: label => `RPM: ${label}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {\n              wrapperStyle: {\n                paddingTop: '20px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"Horsepower\",\n              stroke: \"#ff4444\",\n              strokeWidth: 3,\n              dot: false,\n              name: \"Horsepower\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"Torque\",\n              stroke: \"#44ff44\",\n              strokeWidth: 3,\n              dot: false,\n              name: \"Torque\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-summary-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chart-label\",\n            children: \"Peak HP:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chart-value\",\n            children: [(((_dynoResults$peaks8 = dynoResults.peaks) === null || _dynoResults$peaks8 === void 0 ? void 0 : _dynoResults$peaks8.maxHP) || 0).toFixed(1), \" HP @ \", ((_dynoResults$peaks9 = dynoResults.peaks) === null || _dynoResults$peaks9 === void 0 ? void 0 : _dynoResults$peaks9.maxHPRpm) || 'N/A', \" RPM\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-summary-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chart-label\",\n            children: \"Peak Torque:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chart-value\",\n            children: [(((_dynoResults$peaks0 = dynoResults.peaks) === null || _dynoResults$peaks0 === void 0 ? void 0 : _dynoResults$peaks0.maxTorque) || 0).toFixed(1), \" lb-ft @ \", ((_dynoResults$peaks1 = dynoResults.peaks) === null || _dynoResults$peaks1 === void 0 ? void 0 : _dynoResults$peaks1.maxTorqueRpm) || 'N/A', \" RPM\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-summary-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chart-label\",\n            children: \"Dyno Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chart-value\",\n            children: ((_dynoTypes$dynoResult2 = dynoTypes[(_dynoResults$settings4 = dynoResults.settings) === null || _dynoResults$settings4 === void 0 ? void 0 : _dynoResults$settings4.dynoType]) === null || _dynoTypes$dynoResult2 === void 0 ? void 0 : _dynoTypes$dynoResult2.name) || 'Unknown'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"instructions-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"instructions-title\",\n        children: \"\\uD83C\\uDFAE How to Use Your Virtual Dyno:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"instructions-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Upload your real CSV datalog\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 15\n          }, this), \" (AccessPort, Cobb, MHD, etc.)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Choose dyno type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 15\n          }, this), \" - Different dynos read differently\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Set environmental conditions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 15\n          }, this), \" - Hot weather = less power\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Watch your data process through the virtual dyno\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 15\n          }, this), \" - Real-time simulation\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Compare results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 15\n          }, this), \" - See how different dynos would read your run\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\uD83C\\uDFAF This uses YOUR C# backend calculations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 12\n        }, this), \" with virtual dyno simulation!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tech-flow\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\uD83D\\uDD27 Technical Flow:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 46\n        }, this), \"1. Upload real CSV \\u2192 2. Send to C# backend \\u2192 3. Get your calculations \\u2192 4. Apply virtual dyno effects \\u2192 5. Display responsive chart\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n};\n_s(VirtualDyno, \"jAGeT7MpxCQPLkTdVeELwQEYWR0=\");\n_c = VirtualDyno;\nexport default VirtualDyno;\nvar _c;\n$RefreshReg$(_c, \"VirtualDyno\");","map":{"version":3,"names":["React","useState","useRef","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","VirtualDyno","_s","_dynoResults$peaks","_dynoResults$peaks2","_dynoResults$peaks3","_dynoResults$peaks4","_dynoTypes$dynoResult","_dynoResults$settings","_dynoResults$settings2","_dynoResults$settings3","_dynoResults$peaks5","_dynoResults$peaks6","_dynoResults$peaks7","_dynoResults$peaks8","_dynoResults$peaks9","_dynoResults$peaks0","_dynoResults$peaks1","_dynoTypes$dynoResult2","_dynoResults$settings4","csvFile","setCsvFile","csvData","setCsvData","dynoResults","setDynoResults","isRunning","setIsRunning","currentDataPoint","setCurrentDataPoint","selectedCar","setSelectedCar","virtualDynoSettings","setVirtualDynoSettings","dynoType","temperature","humidity","altitude","fileInputRef","dynoTypes","mustang_md250","name","correction","variance","dynojet_248c","awd_dyno","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","csv","result","lines","split","headers","map","h","trim","data","slice","filter","line","length","values","row","forEach","header","index","_values$index","rpm","parseInt","maf","parseFloat","load","console","log","readAsText","sendToBackend","formData","FormData","append","response","fetch","method","body","ok","backendResults","json","error","status","statusText","runVirtualDyno","alert","_processedData$find","_processedData$find2","_backendResults$peaks","_backendResults$peaks2","_backendResults$peaks3","_backendResults$peaks4","detailResponse","id","detailData","processedData","dataPoints","point","dyno","tempCorrection","Math","sqrt","humidityCorrection","altitudeCorrection","envCorrection","random","Rpm","hp","round","horsepower","Horsepower","torque","Torque","boost","Boost","massAirflow","MassAirflow","Load","backendHP","backendTorque","i","prev","currentPoint","Promise","resolve","setTimeout","peaks","maxHP","max","d","maxTorque","maxHPRpm","find","p","maxTorqueRpm","backendMaxHP","maxHorsepower","backendMaxTorque","backendMaxHPRpm","maxHorsepowerRpm","backendMaxTorqueRpm","settings","fileName","resetDyno","currentData","chartData","className","children","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","ref","onClick","current","click","value","Object","entries","key","min","toFixed","style","width","disabled","height","margin","top","right","left","bottom","strokeDasharray","stroke","dataKey","label","position","offset","textAnchor","fill","angle","contentStyle","backgroundColor","border","borderRadius","color","formatter","Number","labelFormatter","wrapperStyle","paddingTop","strokeWidth","dot","_c","$RefreshReg$"],"sources":["C:/Users/tyler/OneDrive/Desktop/VirtualDyno/virtual-dyno-frontend/src/VirtualDyno.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport './VirtualDyno.css';\r\n\r\n// Virtual Dyno Room that processes REAL user CSV files\r\nconst VirtualDyno = () => {\r\n  const [csvFile, setCsvFile] = useState(null);\r\n  const [csvData, setCsvData] = useState([]);\r\n  const [dynoResults, setDynoResults] = useState(null);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [currentDataPoint, setCurrentDataPoint] = useState(0);\r\n  const [selectedCar, setSelectedCar] = useState('mazdaspeed3');\r\n  const [virtualDynoSettings, setVirtualDynoSettings] = useState({\r\n    dynoType: 'mustang_md250',\r\n    temperature: 75,\r\n    humidity: 45,\r\n    altitude: 500\r\n  });\r\n  const fileInputRef = useRef(null);\r\n\r\n  // Dyno characteristics (no heat soak)\r\n  const dynoTypes = {\r\n    mustang_md250: {\r\n      name: \"Mustang MD250 (Load Bearing)\",\r\n      correction: 1.0,\r\n      variance: 0.02\r\n    },\r\n    dynojet_248c: {\r\n      name: \"DynoJet 248C (Inertial)\", \r\n      correction: 1.15,\r\n      variance: 0.03\r\n    },\r\n    awd_dyno: {\r\n      name: \"AWD Dyno (All-Wheel)\",\r\n      correction: 0.95,\r\n      variance: 0.04\r\n    }\r\n  };\r\n\r\n  // Parse uploaded CSV file\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n    \r\n    setCsvFile(file);\r\n    \r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      const csv = e.target.result;\r\n      const lines = csv.split('\\n');\r\n      const headers = lines[0].split(',').map(h => h.trim());\r\n      \r\n      const data = lines.slice(1)\r\n        .filter(line => line.trim().length > 0)\r\n        .map(line => {\r\n          const values = line.split(',');\r\n          const row = {};\r\n          headers.forEach((header, index) => {\r\n            row[header] = values[index]?.trim();\r\n          });\r\n          return row;\r\n        })\r\n        .filter(row => {\r\n          // Filter for valid dyno data (like your C# backend does)\r\n          const rpm = parseInt(row['RPM (RPM)'] || row['RPM'] || row['Engine Speed']);\r\n          const maf = parseFloat(row['Mass Airflow (g/s)'] || row['MAF'] || row['Mass Airflow']);\r\n          const load = parseFloat(row['Calculated Load (Load)'] || row['Load'] || row['Engine Load']);\r\n          \r\n          return rpm > 2000 && maf > 5 && load > 0.15;\r\n        });\r\n      \r\n      setCsvData(data);\r\n      console.log(`Loaded ${data.length} valid data points from CSV`);\r\n    };\r\n    \r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Send to your C# backend and return results\r\n  const sendToBackend = async () => {\r\n    if (!csvFile) return null;\r\n    \r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('File', csvFile);\r\n      formData.append('CarPresetKey', selectedCar);\r\n      formData.append('Weight', '3200');\r\n      formData.append('Gear', '4');\r\n      formData.append('Notes', `Virtual dyno: ${virtualDynoSettings.dynoType}, ${virtualDynoSettings.temperature}°F`);\r\n      formData.append('IsPublic', 'false');\r\n      \r\n      console.log('Sending CSV to C# backend...');\r\n      const response = await fetch('http://localhost:5038/api/dyno/upload', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const backendResults = await response.json();\r\n        console.log('✅ C# Backend Results:', backendResults);\r\n        return backendResults;\r\n      } else {\r\n        console.error('Backend API error:', response.status, response.statusText);\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to connect to C# backend:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Run virtual dyno using YOUR C# backend for calculations\r\n  const runVirtualDyno = async () => {\r\n    if (!csvData.length) {\r\n      alert('Please upload a CSV file first!');\r\n      return;\r\n    }\r\n    \r\n    setIsRunning(true);\r\n    setCurrentDataPoint(0);\r\n    \r\n    try {\r\n      // 1. Send real CSV to YOUR C# backend for processing\r\n      const backendResults = await sendToBackend();\r\n      \r\n      if (!backendResults) {\r\n        alert('Could not connect to backend API. Make sure your C# API is running on localhost:5038');\r\n        setIsRunning(false);\r\n        return;\r\n      }\r\n      \r\n      // 2. Get the official datapoints from YOUR backend\r\n      const detailResponse = await fetch(`http://localhost:5038/api/dyno/runs/${backendResults.id}`);\r\n      \r\n      if (!detailResponse.ok) {\r\n        console.error('Failed to get detailed run data:', detailResponse.status);\r\n        setIsRunning(false);\r\n        return;\r\n      }\r\n      \r\n      const detailData = await detailResponse.json();\r\n      \r\n      // 3. Apply virtual dyno characteristics to YOUR calculated results\r\n      const processedData = (detailData.dataPoints || []).map((point, index) => {\r\n        \r\n        // Use YOUR backend's calculations as base, apply dyno characteristics\r\n        const dyno = dynoTypes[virtualDynoSettings.dynoType];\r\n        \r\n        // Environmental effects\r\n        const tempCorrection = Math.sqrt(537.67 / (virtualDynoSettings.temperature + 459.67));\r\n        const humidityCorrection = 1 - (virtualDynoSettings.humidity / 100 * 0.047);\r\n        const altitudeCorrection = 1 - (virtualDynoSettings.altitude * 0.000035);\r\n        const envCorrection = tempCorrection * humidityCorrection * altitudeCorrection;\r\n        \r\n        // Dyno type correction and variance\r\n        const variance = 1 + (Math.random() - 0.5) * 2 * dyno.variance;\r\n        \r\n        return {\r\n          rpm: point.rpm || point.Rpm || 0,\r\n          hp: Math.round((point.horsepower || point.Horsepower || 0) * envCorrection * dyno.correction * variance * 10) / 10,\r\n          torque: Math.round((point.torque || point.Torque || 0) * envCorrection * variance * 10) / 10,\r\n          boost: point.boost || point.Boost || 0,\r\n          maf: point.massAirflow || point.MassAirflow || 0,\r\n          load: point.load || point.Load || 0,\r\n          backendHP: point.horsepower || point.Horsepower || 0,\r\n          backendTorque: point.torque || point.Torque || 0\r\n        };\r\n      });\r\n      \r\n      // 4. Animate the virtual dyno run\r\n      for (let i = 0; i < processedData.length; i++) {\r\n        setCurrentDataPoint(i);\r\n        if (i < processedData.length) {\r\n          setDynoResults(prev => ({\r\n            ...prev,\r\n            currentPoint: processedData[i]\r\n          }));\r\n        }\r\n        await new Promise(resolve => setTimeout(resolve, 150));\r\n      }\r\n      \r\n      // 5. Calculate final peaks from virtual dyno\r\n      const peaks = {\r\n        maxHP: processedData.length > 0 ? Math.max(...processedData.map(d => d.hp || 0)) : 0,\r\n        maxTorque: processedData.length > 0 ? Math.max(...processedData.map(d => d.torque || 0)) : 0,\r\n        maxHPRpm: processedData.find(d => d.hp === Math.max(...processedData.map(p => p.hp || 0)))?.rpm || 0,\r\n        maxTorqueRpm: processedData.find(d => d.torque === Math.max(...processedData.map(p => p.torque || 0)))?.rpm || 0,\r\n        backendMaxHP: backendResults.peaks?.maxHorsepower || 0,\r\n        backendMaxTorque: backendResults.peaks?.maxTorque || 0,\r\n        backendMaxHPRpm: backendResults.peaks?.maxHorsepowerRpm || 0,\r\n        backendMaxTorqueRpm: backendResults.peaks?.maxTorqueRpm || 0\r\n      };\r\n      \r\n      setDynoResults({\r\n        processedData,\r\n        peaks,\r\n        settings: virtualDynoSettings,\r\n        fileName: csvFile.name,\r\n        backendResults\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error('Error running virtual dyno:', error);\r\n      alert('Error connecting to backend API. Make sure your C# API is running.');\r\n    } finally {\r\n      setIsRunning(false);\r\n    }\r\n  };\r\n\r\n  // Reset dyno results\r\n  const resetDyno = () => {\r\n    setDynoResults(null);\r\n    setCurrentDataPoint(0);\r\n  };\r\n\r\n  const currentData = dynoResults?.currentPoint || (dynoResults?.processedData && dynoResults.processedData[currentDataPoint]);\r\n\r\n  // Format chart data\r\n  const chartData = dynoResults?.processedData ? \r\n    dynoResults.processedData.map(point => ({\r\n      rpm: point.rpm,\r\n      Horsepower: point.hp,\r\n      Torque: point.torque,\r\n      Boost: point.boost\r\n    })) : [];\r\n\r\n  return (\r\n    <div className=\"virtual-dyno-container\">\r\n      <h1 className=\"virtual-dyno-title\">🏁 Virtual Dyno Experience - Powered by Your C# Backend</h1>\r\n      \r\n      <div className=\"backend-status-alert\">\r\n        <strong>⚙️ Make sure your C# backend is running:</strong> <code>cd VirtualDyno.API && dotnet run</code>\r\n      </div>\r\n      \r\n      <div className=\"dyno-main-grid\">\r\n        \r\n        {/* File Upload */}\r\n        <div className={`file-upload-section ${csvFile ? 'has-file' : ''}`}>\r\n          <h3 className=\"file-upload-title\">📁 Upload Your Datalog</h3>\r\n          <input \r\n            type=\"file\" \r\n            accept=\".csv\"\r\n            onChange={handleFileUpload}\r\n            ref={fileInputRef}\r\n            className=\"hidden\"\r\n          />\r\n          <button \r\n            onClick={() => fileInputRef.current.click()}\r\n            className=\"file-upload-button\"\r\n          >\r\n            {csvFile ? '✅ Change File' : '📂 Select CSV File'}\r\n          </button>\r\n          \r\n          {csvFile && (\r\n            <div className=\"file-info\">\r\n              <p><strong>File:</strong> {csvFile.name}</p>\r\n              <p><strong>Data Points:</strong> {csvData.length}</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Virtual Dyno Settings */}\r\n        <div className=\"settings-panel\">\r\n          <h3 className=\"settings-title\">🚗 Vehicle Selection</h3>\r\n          \r\n          <label className=\"settings-label\">Select Car:</label>\r\n          <select \r\n            value={selectedCar}\r\n            onChange={(e) => {\r\n              setSelectedCar(e.target.value);\r\n              setDynoResults(null);\r\n              resetDyno();\r\n            }}\r\n            className=\"settings-select\"\r\n          >\r\n            <option value=\"mazdaspeed3\">Mazdaspeed3</option>\r\n            <option value=\"wrx\">Subaru WRX</option>\r\n            <option value=\"gti\">VW GTI</option>\r\n            <option value=\"focus_st\">Ford Focus ST</option>\r\n          </select>\r\n\r\n          <h3 className=\"settings-title\">🔧 Dyno Settings</h3>\r\n          \r\n          <label className=\"settings-label\">Dyno Type:</label>\r\n          <select \r\n            value={virtualDynoSettings.dynoType}\r\n            onChange={(e) => setVirtualDynoSettings(prev => ({\r\n              ...prev, dynoType: e.target.value\r\n            }))}\r\n            className=\"settings-select\"\r\n          >\r\n            {Object.entries(dynoTypes).map(([key, dyno]) => (\r\n              <option key={key} value={key}>{dyno.name}</option>\r\n            ))}\r\n          </select>\r\n          \r\n          <label className=\"settings-label\">Temperature: {virtualDynoSettings.temperature}°F</label>\r\n          <input \r\n            type=\"range\" \r\n            min=\"50\" \r\n            max=\"110\" \r\n            value={virtualDynoSettings.temperature}\r\n            onChange={(e) => setVirtualDynoSettings(prev => ({\r\n              ...prev, temperature: parseInt(e.target.value)\r\n            }))}\r\n            className=\"settings-range\"\r\n          />\r\n          \r\n          <label className=\"settings-label\">Humidity: {virtualDynoSettings.humidity}%</label>\r\n          <input \r\n            type=\"range\" \r\n            min=\"10\" \r\n            max=\"90\" \r\n            value={virtualDynoSettings.humidity}\r\n            onChange={(e) => setVirtualDynoSettings(prev => ({\r\n              ...prev, humidity: parseInt(e.target.value)\r\n            }))}\r\n            className=\"settings-range\"\r\n          />\r\n        </div>\r\n\r\n        {/* Live Dyno Display */}\r\n        <div className={`dyno-display-panel ${isRunning ? 'running' : ''}`}>\r\n          <h3 className=\"dyno-display-title\">{isRunning ? 'PROCESSING...' : 'Virtual Dyno'}</h3>\r\n          \r\n          {isRunning && currentData && (\r\n            <div className=\"live-dyno-reading\">\r\n              <div className=\"live-rpm\">\r\n                {currentData.rpm || 0} RPM\r\n              </div>\r\n              <div className=\"live-power\">\r\n                {(currentData.hp || 0).toFixed(1)} HP | {(currentData.torque || 0).toFixed(1)} lb-ft\r\n              </div>\r\n              <div className=\"live-details\">\r\n                Boost: {(currentData.boost || 0).toFixed(1)} PSI | MAF: {(currentData.maf || 0).toFixed(1)} g/s\r\n              </div>\r\n              <div className=\"progress-bar-container\">\r\n                <div className=\"progress-bar\" style={{ \r\n                  width: `${csvData.length > 0 ? (currentDataPoint / csvData.length) * 100 : 0}%`\r\n                }}></div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {dynoResults && !isRunning && (\r\n            <div className=\"results-display\">\r\n              <h4 className=\"results-title\">🏆 Virtual Dyno Results</h4>\r\n              <div className=\"virtual-results\">\r\n                <p><strong>{(dynoResults.peaks?.maxHP || 0).toFixed(1)} HP</strong> @ {dynoResults.peaks?.maxHPRpm || 'N/A'} RPM</p>\r\n                <p><strong>{(dynoResults.peaks?.maxTorque || 0).toFixed(1)} lb-ft</strong> @ {dynoResults.peaks?.maxTorqueRpm || 'N/A'} RPM</p>\r\n                <p className=\"results-meta\">\r\n                  Dyno: {dynoTypes[dynoResults.settings?.dynoType]?.name || 'Unknown'}<br/>\r\n                  Temp: {dynoResults.settings?.temperature || 'N/A'}°F, Humidity: {dynoResults.settings?.humidity || 'N/A'}%\r\n                </p>\r\n              </div>\r\n              \r\n              {dynoResults.peaks?.backendMaxHP && (\r\n                <div className=\"backend-results\">\r\n                  <strong>🧮 Your C# Backend Results:</strong><br/>\r\n                  {(dynoResults.peaks.backendMaxHP || 0).toFixed(1)} HP @ {dynoResults.peaks?.backendMaxHPRpm || 'N/A'} RPM<br/>\r\n                  {(dynoResults.peaks.backendMaxTorque || 0).toFixed(1)} lb-ft @ {dynoResults.peaks?.backendMaxTorqueRpm || 'N/A'} RPM<br/>\r\n                  <em>(Before virtual dyno effects)</em>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {!isRunning && !dynoResults && csvData.length > 0 && (\r\n            <div className=\"status-ready\">\r\n              <p><strong>Ready to Run!</strong></p>\r\n              <p>CSV loaded with {csvData.length} data points</p>\r\n              <p>Click \"START VIRTUAL DYNO\" to process with your C# backend</p>\r\n            </div>\r\n          )}\r\n          \r\n          {!isRunning && !dynoResults && csvData.length === 0 && (\r\n            <div className=\"status-waiting\">\r\n              <p>Upload a CSV file to get started</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Control Buttons */}\r\n      <div className=\"controls-section\">\r\n        <button \r\n          onClick={runVirtualDyno}\r\n          disabled={!csvData.length || isRunning}\r\n          className=\"btn-primary\"\r\n        >\r\n          {isRunning ? '🏃 PROCESSING...' : `🚀 START VIRTUAL DYNO`}\r\n        </button>\r\n        \r\n        {dynoResults && !isRunning && (\r\n          <button \r\n            onClick={resetDyno}\r\n            className=\"btn-tertiary\"\r\n          >\r\n            🔄 Reset\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {/* RESPONSIVE DYNO CHART */}\r\n      {dynoResults && !isRunning && chartData.length > 0 && (\r\n        <div className=\"dyno-chart-section\">\r\n          <h3 className=\"chart-title\">📊 Dyno Chart Results</h3>\r\n          <div className=\"chart-container\">\r\n            <ResponsiveContainer width=\"100%\" height={400}>\r\n              <LineChart\r\n                data={chartData}\r\n                margin={{\r\n                  top: 20,\r\n                  right: 30,\r\n                  left: 20,\r\n                  bottom: 60,\r\n                }}\r\n              >\r\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#444\" />\r\n                <XAxis \r\n                  dataKey=\"rpm\" \r\n                  stroke=\"#ccc\"\r\n                  label={{ value: 'RPM', position: 'insideBottom', offset: -5, style: { textAnchor: 'middle', fill: '#ccc' } }}\r\n                />\r\n                <YAxis \r\n                  stroke=\"#ccc\"\r\n                  label={{ value: 'HP / Torque', angle: -90, position: 'insideLeft', style: { textAnchor: 'middle', fill: '#ccc' } }}\r\n                />\r\n                <Tooltip \r\n                  contentStyle={{ \r\n                    backgroundColor: '#2a2a2a', \r\n                    border: '1px solid #555',\r\n                    borderRadius: '8px',\r\n                    color: '#fff'\r\n                  }}\r\n                  formatter={(value, name) => [\r\n                    `${Number(value).toFixed(1)} ${name === 'Horsepower' ? 'HP' : name === 'Torque' ? 'lb-ft' : 'PSI'}`, \r\n                    name\r\n                  ]}\r\n                  labelFormatter={(label) => `RPM: ${label}`}\r\n                />\r\n                <Legend \r\n                  wrapperStyle={{ paddingTop: '20px' }}\r\n                />\r\n                <Line \r\n                  type=\"monotone\" \r\n                  dataKey=\"Horsepower\" \r\n                  stroke=\"#ff4444\" \r\n                  strokeWidth={3}\r\n                  dot={false}\r\n                  name=\"Horsepower\"\r\n                />\r\n                <Line \r\n                  type=\"monotone\" \r\n                  dataKey=\"Torque\" \r\n                  stroke=\"#44ff44\" \r\n                  strokeWidth={3}\r\n                  dot={false}\r\n                  name=\"Torque\"\r\n                />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n          \r\n          {/* Chart Summary */}\r\n          <div className=\"chart-summary\">\r\n            <div className=\"chart-summary-item\">\r\n              <span className=\"chart-label\">Peak HP:</span>\r\n              <span className=\"chart-value\">{(dynoResults.peaks?.maxHP || 0).toFixed(1)} HP @ {dynoResults.peaks?.maxHPRpm || 'N/A'} RPM</span>\r\n            </div>\r\n            <div className=\"chart-summary-item\">\r\n              <span className=\"chart-label\">Peak Torque:</span>\r\n              <span className=\"chart-value\">{(dynoResults.peaks?.maxTorque || 0).toFixed(1)} lb-ft @ {dynoResults.peaks?.maxTorqueRpm || 'N/A'} RPM</span>\r\n            </div>\r\n            <div className=\"chart-summary-item\">\r\n              <span className=\"chart-label\">Dyno Type:</span>\r\n              <span className=\"chart-value\">{dynoTypes[dynoResults.settings?.dynoType]?.name || 'Unknown'}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Instructions */}\r\n      <div className=\"instructions-panel\">\r\n        <h4 className=\"instructions-title\">🎮 How to Use Your Virtual Dyno:</h4>\r\n        <ol className=\"instructions-list\">\r\n          <li><strong>Upload your real CSV datalog</strong> (AccessPort, Cobb, MHD, etc.)</li>\r\n          <li><strong>Choose dyno type</strong> - Different dynos read differently</li>\r\n          <li><strong>Set environmental conditions</strong> - Hot weather = less power</li>\r\n          <li><strong>Watch your data process through the virtual dyno</strong> - Real-time simulation</li>\r\n          <li><strong>Compare results</strong> - See how different dynos would read your run</li>\r\n        </ol>\r\n        \r\n        <p><strong>🎯 This uses YOUR C# backend calculations</strong> with virtual dyno simulation!</p>\r\n        \r\n        <div className=\"tech-flow\">\r\n          <strong>🔧 Technical Flow:</strong><br/>\r\n          1. Upload real CSV → 2. Send to C# backend → 3. Get your calculations → 4. Apply virtual dyno effects → 5. Display responsive chart\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VirtualDyno;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}