{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tyler\\\\OneDrive\\\\Desktop\\\\VirtualDyno\\\\virtual-dyno-frontend\\\\src\\\\VirtualDyno.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport './VirtualDyno.css';\n\n// Virtual Dyno Room that processes REAL user CSV files\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VirtualDyno = () => {\n  _s();\n  var _dynoResults$peaks, _dynoResults$peaks2, _dynoResults$peaks3, _dynoResults$peaks4, _dynoTypes$dynoResult, _dynoResults$settings, _dynoResults$settings2, _dynoResults$settings3, _dynoResults$settings4, _dynoResults$peaks5, _dynoResults$peaks6, _dynoResults$peaks7;\n  const [csvFile, setCsvFile] = useState(null);\n  const [csvData, setCsvData] = useState([]);\n  const [dynoResults, setDynoResults] = useState(null);\n  const [isRunning, setIsRunning] = useState(false);\n  const [currentDataPoint, setCurrentDataPoint] = useState(0);\n  const [selectedCar, setSelectedCar] = useState('mazdaspeed3');\n  const [virtualDynoSettings, setVirtualDynoSettings] = useState({\n    dynoType: 'mustang_md250',\n    temperature: 75,\n    humidity: 45,\n    altitude: 500\n  });\n  const fileInputRef = useRef(null);\n\n  // Dyno characteristics (no heat soak)\n  const dynoTypes = {\n    mustang_md250: {\n      name: \"Mustang MD250 (Load Bearing)\",\n      correction: 1.0,\n      variance: 0.02\n    },\n    dynojet_248c: {\n      name: \"DynoJet 248C (Inertial)\",\n      correction: 1.15,\n      variance: 0.03\n    },\n    awd_dyno: {\n      name: \"AWD Dyno (All-Wheel)\",\n      correction: 0.95,\n      variance: 0.04\n    }\n  };\n\n  // Parse uploaded CSV file\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    setCsvFile(file);\n    const reader = new FileReader();\n    reader.onload = e => {\n      const csv = e.target.result;\n      const lines = csv.split('\\n');\n      const headers = lines[0].split(',').map(h => h.trim());\n      const data = lines.slice(1).filter(line => line.trim().length > 0).map(line => {\n        const values = line.split(',');\n        const row = {};\n        headers.forEach((header, index) => {\n          var _values$index;\n          row[header] = (_values$index = values[index]) === null || _values$index === void 0 ? void 0 : _values$index.trim();\n        });\n        return row;\n      }).filter(row => {\n        // Filter for valid dyno data (like your C# backend does)\n        const rpm = parseInt(row['RPM (RPM)'] || row['RPM'] || row['Engine Speed']);\n        const maf = parseFloat(row['Mass Airflow (g/s)'] || row['MAF'] || row['Mass Airflow']);\n        const load = parseFloat(row['Calculated Load (Load)'] || row['Load'] || row['Engine Load']);\n        return rpm > 2000 && maf > 5 && load > 0.15;\n      });\n      setCsvData(data);\n      console.log(`Loaded ${data.length} valid data points from CSV`);\n    };\n    reader.readAsText(file);\n  };\n\n  // Send to your C# backend and return results\n  const sendToBackend = async () => {\n    if (!csvFile) return null;\n    try {\n      const formData = new FormData();\n      formData.append('File', csvFile);\n      formData.append('CarPresetKey', selectedCar);\n      formData.append('Weight', '3200');\n      formData.append('Gear', '4');\n      formData.append('Notes', `Virtual dyno: ${virtualDynoSettings.dynoType}, ${virtualDynoSettings.temperature}°F`);\n      formData.append('IsPublic', 'false');\n      console.log('Sending CSV to C# backend...');\n      const response = await fetch('http://localhost:5038/api/dyno/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        const backendResults = await response.json();\n        console.log('✅ C# Backend Results:', backendResults);\n        console.log('Backend peaks:', backendResults.peaks);\n        console.log('Backend dataPointCount:', backendResults.dataPointCount);\n        return backendResults;\n      } else {\n        console.error('Backend API error:', response.status, response.statusText);\n        const errorText = await response.text();\n        console.error('Error response:', errorText);\n        return null;\n      }\n    } catch (error) {\n      console.error('Failed to connect to C# backend:', error);\n      return null;\n    }\n  };\n\n  // Run virtual dyno using YOUR C# backend for calculations\n  const runVirtualDyno = async () => {\n    if (!csvData.length) {\n      alert('Please upload a CSV file first!');\n      return;\n    }\n    setIsRunning(true);\n    setCurrentDataPoint(0);\n    try {\n      var _detailData$dataPoint, _detailData$dataPoint2, _processedData$find, _processedData$find2, _backendResults$peaks, _backendResults$peaks2, _backendResults$peaks3, _backendResults$peaks4;\n      // 1. Send real CSV to YOUR C# backend for processing\n      const backendResults = await sendToBackend();\n      if (!backendResults) {\n        alert('Could not connect to backend API. Make sure your C# API is running on localhost:5038');\n        setIsRunning(false);\n        return;\n      }\n      console.log('Backend response structure:', backendResults);\n\n      // 2. Get the official datapoints from YOUR backend\n      const detailResponse = await fetch(`http://localhost:5038/api/dyno/runs/${backendResults.id}`);\n      if (!detailResponse.ok) {\n        console.error('Failed to get detailed run data:', detailResponse.status);\n        setIsRunning(false);\n        return;\n      }\n      const detailData = await detailResponse.json();\n      console.log('🔍 Detail data structure:', detailData);\n      console.log('🔍 First data point:', (_detailData$dataPoint = detailData.dataPoints) === null || _detailData$dataPoint === void 0 ? void 0 : _detailData$dataPoint[0]);\n      console.log('🔍 Data point properties:', Object.keys(((_detailData$dataPoint2 = detailData.dataPoints) === null || _detailData$dataPoint2 === void 0 ? void 0 : _detailData$dataPoint2[0]) || {}));\n\n      // 3. Apply virtual dyno characteristics to YOUR calculated results\n      const processedData = (detailData.dataPoints || []).map((point, index) => {\n        // Debug logging for first few points\n        if (index < 3) {\n          console.log(`🔍 Point ${index}:`, point);\n          console.log(`🔍 Available properties:`, Object.keys(point));\n          console.log(`🔍 MAF check: massAirflow=${point.massAirflow}, MassAirflow=${point.MassAirflow}`);\n          console.log(`🔍 Boost check: boost=${point.boost}, Boost=${point.Boost}`);\n        }\n\n        // Use YOUR backend's calculations as base, apply dyno characteristics\n        const dyno = dynoTypes[virtualDynoSettings.dynoType];\n\n        // Environmental effects\n        const tempCorrection = Math.sqrt(537.67 / (virtualDynoSettings.temperature + 459.67));\n        const humidityCorrection = 1 - virtualDynoSettings.humidity / 100 * 0.047;\n        const altitudeCorrection = 1 - virtualDynoSettings.altitude * 0.000035;\n        const envCorrection = tempCorrection * humidityCorrection * altitudeCorrection;\n\n        // Dyno type correction and variance\n        const variance = 1 + (Math.random() - 0.5) * 2 * dyno.variance;\n        return {\n          rpm: point.rpm || point.Rpm || 0,\n          hp: (point.horsepower || point.Horsepower || 0) * envCorrection * dyno.correction * variance,\n          torque: (point.torque || point.Torque || 0) * envCorrection * variance,\n          boost: point.boost || point.Boost || 0,\n          maf: point.massAirflow || point.MassAirflow || 0,\n          load: point.load || point.Load || 0,\n          backendHP: point.horsepower || point.Horsepower || 0,\n          backendTorque: point.torque || point.Torque || 0\n        };\n      });\n\n      // 4. Animate the virtual dyno run\n      for (let i = 0; i < processedData.length; i++) {\n        setCurrentDataPoint(i);\n        // Show current point during animation\n        if (i < processedData.length) {\n          setDynoResults(prev => ({\n            ...prev,\n            currentPoint: processedData[i]\n          }));\n        }\n        await new Promise(resolve => setTimeout(resolve, 150));\n      }\n\n      // 5. Calculate final peaks from virtual dyno\n      const peaks = {\n        maxHP: processedData.length > 0 ? Math.max(...processedData.map(d => d.hp || 0)) : 0,\n        maxTorque: processedData.length > 0 ? Math.max(...processedData.map(d => d.torque || 0)) : 0,\n        maxHPRpm: ((_processedData$find = processedData.find(d => d.hp === Math.max(...processedData.map(p => p.hp || 0)))) === null || _processedData$find === void 0 ? void 0 : _processedData$find.rpm) || 0,\n        maxTorqueRpm: ((_processedData$find2 = processedData.find(d => d.torque === Math.max(...processedData.map(p => p.torque || 0)))) === null || _processedData$find2 === void 0 ? void 0 : _processedData$find2.rpm) || 0,\n        // Also include YOUR backend's original peaks for comparison\n        backendMaxHP: ((_backendResults$peaks = backendResults.peaks) === null || _backendResults$peaks === void 0 ? void 0 : _backendResults$peaks.maxHorsepower) || 0,\n        backendMaxTorque: ((_backendResults$peaks2 = backendResults.peaks) === null || _backendResults$peaks2 === void 0 ? void 0 : _backendResults$peaks2.maxTorque) || 0,\n        backendMaxHPRpm: ((_backendResults$peaks3 = backendResults.peaks) === null || _backendResults$peaks3 === void 0 ? void 0 : _backendResults$peaks3.maxHorsepowerRpm) || 0,\n        backendMaxTorqueRpm: ((_backendResults$peaks4 = backendResults.peaks) === null || _backendResults$peaks4 === void 0 ? void 0 : _backendResults$peaks4.maxTorqueRpm) || 0\n      };\n      setDynoResults({\n        processedData,\n        peaks,\n        settings: virtualDynoSettings,\n        fileName: csvFile.name,\n        backendResults // Store original backend results\n      });\n    } catch (error) {\n      console.error('Error running virtual dyno:', error);\n      alert('Error connecting to backend API. Make sure your C# API is running.');\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  // Reset dyno results\n  const resetDyno = () => {\n    setDynoResults(null);\n    setCurrentDataPoint(0);\n  };\n  const currentData = (dynoResults === null || dynoResults === void 0 ? void 0 : dynoResults.currentPoint) || (dynoResults === null || dynoResults === void 0 ? void 0 : dynoResults.processedData) && dynoResults.processedData[currentDataPoint];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"virtual-dyno-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"virtual-dyno-title\",\n      children: \"\\uD83C\\uDFC1 Virtual Dyno Experience - Powered by Your C# Backend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"backend-status-alert\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"\\u2699\\uFE0F Make sure your C# backend is running:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"cd VirtualDyno.API && dotnet run\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 67\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dyno-main-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `file-upload-section ${csvFile ? 'has-file' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"file-upload-title\",\n          children: \"\\uD83D\\uDCC1 Upload Your Datalog\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".csv\",\n          onChange: handleFileUpload,\n          ref: fileInputRef,\n          className: \"hidden\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => fileInputRef.current.click(),\n          className: \"file-upload-button\",\n          children: csvFile ? '✅ Change File' : '📂 Select CSV File'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this), csvFile && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"File:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 18\n            }, this), \" \", csvFile.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Data Points:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 18\n            }, this), \" \", csvData.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"settings-title\",\n          children: \"\\uD83D\\uDE97 Vehicle Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"settings-label\",\n          children: \"Select Car:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedCar,\n          onChange: e => {\n            setSelectedCar(e.target.value);\n            setDynoResults(null); // Clear previous results\n            resetDyno(); // Reset session\n          },\n          className: \"settings-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"mazdaspeed3\",\n            children: \"Mazdaspeed3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"wrx\",\n            children: \"Subaru WRX\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gti\",\n            children: \"VW GTI\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"focus_st\",\n            children: \"Ford Focus ST\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"settings-title\",\n          children: \"\\uD83D\\uDD27 Dyno Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"settings-label\",\n          children: \"Dyno Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: virtualDynoSettings.dynoType,\n          onChange: e => setVirtualDynoSettings(prev => ({\n            ...prev,\n            dynoType: e.target.value\n          })),\n          className: \"settings-select\",\n          children: Object.entries(dynoTypes).map(([key, dyno]) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: key,\n            children: dyno.name\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"settings-label\",\n          children: [\"Temperature: \", virtualDynoSettings.temperature, \"\\xB0F\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"50\",\n          max: \"110\",\n          value: virtualDynoSettings.temperature,\n          onChange: e => setVirtualDynoSettings(prev => ({\n            ...prev,\n            temperature: parseInt(e.target.value)\n          })),\n          className: \"settings-range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"settings-label\",\n          children: [\"Humidity: \", virtualDynoSettings.humidity, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"10\",\n          max: \"90\",\n          value: virtualDynoSettings.humidity,\n          onChange: e => setVirtualDynoSettings(prev => ({\n            ...prev,\n            humidity: parseInt(e.target.value)\n          })),\n          className: \"settings-range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"settings-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Selected Car:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 40\n          }, this), \" \", selectedCar]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"settings-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Dyno Correction:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 40\n          }, this), \" \", dynoTypes[virtualDynoSettings.dynoType].correction, \"x\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `dyno-display-panel ${isRunning ? 'running' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"dyno-display-title\",\n          children: isRunning ? 'PROCESSING...' : 'Virtual Dyno'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this), isRunning && currentData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"live-dyno-reading\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"live-rpm\",\n            children: [currentData.rpm || 0, \" RPM\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"live-power\",\n            children: [(currentData.hp || 0).toFixed(1), \" HP | \", (currentData.torque || 0).toFixed(1), \" lb-ft\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"live-details\",\n            children: [\"Boost: \", (currentData.boost || 0).toFixed(1), \" PSI | MAF: \", (currentData.maf || 0).toFixed(1), \" g/s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              style: {\n                width: `${csvData.length > 0 ? currentDataPoint / csvData.length * 100 : 0}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this), dynoResults && !isRunning && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"results-title\",\n            children: \"\\uD83C\\uDFC6 Virtual Dyno Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"virtual-results\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [(((_dynoResults$peaks = dynoResults.peaks) === null || _dynoResults$peaks === void 0 ? void 0 : _dynoResults$peaks.maxHP) || 0).toFixed(1), \" HP\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 20\n              }, this), \" @ \", ((_dynoResults$peaks2 = dynoResults.peaks) === null || _dynoResults$peaks2 === void 0 ? void 0 : _dynoResults$peaks2.maxHPRpm) || 'N/A', \" RPM\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [(((_dynoResults$peaks3 = dynoResults.peaks) === null || _dynoResults$peaks3 === void 0 ? void 0 : _dynoResults$peaks3.maxTorque) || 0).toFixed(1), \" lb-ft\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 20\n              }, this), \" @ \", ((_dynoResults$peaks4 = dynoResults.peaks) === null || _dynoResults$peaks4 === void 0 ? void 0 : _dynoResults$peaks4.maxTorqueRpm) || 'N/A', \" RPM\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"results-meta\",\n              children: [\"Dyno: \", ((_dynoTypes$dynoResult = dynoTypes[(_dynoResults$settings = dynoResults.settings) === null || _dynoResults$settings === void 0 ? void 0 : _dynoResults$settings.dynoType]) === null || _dynoTypes$dynoResult === void 0 ? void 0 : _dynoTypes$dynoResult.name) || 'Unknown', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 87\n              }, this), \"Temp: \", ((_dynoResults$settings2 = dynoResults.settings) === null || _dynoResults$settings2 === void 0 ? void 0 : _dynoResults$settings2.temperature) || 'N/A', \"\\xB0F, Humidity: \", ((_dynoResults$settings3 = dynoResults.settings) === null || _dynoResults$settings3 === void 0 ? void 0 : _dynoResults$settings3.humidity) || 'N/A', \"%\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 125\n              }, this), \"Altitude: \", ((_dynoResults$settings4 = dynoResults.settings) === null || _dynoResults$settings4 === void 0 ? void 0 : _dynoResults$settings4.altitude) || 'N/A', \"ft\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 15\n          }, this), ((_dynoResults$peaks5 = dynoResults.peaks) === null || _dynoResults$peaks5 === void 0 ? void 0 : _dynoResults$peaks5.backendMaxHP) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"backend-results\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\uD83E\\uDDEE Your C# Backend Results:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 63\n            }, this), (dynoResults.peaks.backendMaxHP || 0).toFixed(1), \" HP @ \", ((_dynoResults$peaks6 = dynoResults.peaks) === null || _dynoResults$peaks6 === void 0 ? void 0 : _dynoResults$peaks6.backendMaxHPRpm) || 'N/A', \" RPM\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 124\n            }, this), (dynoResults.peaks.backendMaxTorque || 0).toFixed(1), \" lb-ft @ \", ((_dynoResults$peaks7 = dynoResults.peaks) === null || _dynoResults$peaks7 === void 0 ? void 0 : _dynoResults$peaks7.backendMaxTorqueRpm) || 'N/A', \" RPM\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 135\n            }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n              children: \"(Before virtual dyno effects)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 13\n        }, this), !isRunning && !dynoResults && csvData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-ready\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Ready to Run!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"CSV loaded with \", csvData.length, \" data points\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Click \\\"START VIRTUAL DYNO\\\" to process with your C# backend\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this), !isRunning && !dynoResults && csvData.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-waiting\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Upload a CSV file to get started\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: runVirtualDyno,\n        disabled: !csvData.length || isRunning,\n        className: \"btn-primary\",\n        children: isRunning ? '🏃 PROCESSING...' : `🚀 START VIRTUAL DYNO`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), dynoResults && !isRunning && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetDyno,\n        className: \"btn-tertiary\",\n        children: \"\\uD83D\\uDD04 Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"instructions-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"instructions-title\",\n        children: \"\\uD83C\\uDFAE How to Use Your Virtual Dyno:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"instructions-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Upload your real CSV datalog\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 15\n          }, this), \" (AccessPort, Cobb, MHD, etc.)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Choose dyno type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 15\n          }, this), \" - Different dynos read differently\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Set environmental conditions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 15\n          }, this), \" - Hot weather = less power\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Watch your data process through the virtual dyno\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 15\n          }, this), \" - Real-time simulation\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Compare results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 15\n          }, this), \" - See how different dynos would read your run\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\uD83C\\uDFAF This uses YOUR C# backend calculations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 12\n        }, this), \" with virtual dyno simulation!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tech-flow\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"\\uD83D\\uDD27 Technical Flow:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 46\n        }, this), \"1. Upload real CSV \\u2192 2. Send to C# backend \\u2192 3. Get your calculations \\u2192 4. Apply virtual dyno effects \\u2192 5. Immersive experience\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n};\n_s(VirtualDyno, \"jAGeT7MpxCQPLkTdVeELwQEYWR0=\");\n_c = VirtualDyno;\nexport default VirtualDyno;\nvar _c;\n$RefreshReg$(_c, \"VirtualDyno\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","VirtualDyno","_s","_dynoResults$peaks","_dynoResults$peaks2","_dynoResults$peaks3","_dynoResults$peaks4","_dynoTypes$dynoResult","_dynoResults$settings","_dynoResults$settings2","_dynoResults$settings3","_dynoResults$settings4","_dynoResults$peaks5","_dynoResults$peaks6","_dynoResults$peaks7","csvFile","setCsvFile","csvData","setCsvData","dynoResults","setDynoResults","isRunning","setIsRunning","currentDataPoint","setCurrentDataPoint","selectedCar","setSelectedCar","virtualDynoSettings","setVirtualDynoSettings","dynoType","temperature","humidity","altitude","fileInputRef","dynoTypes","mustang_md250","name","correction","variance","dynojet_248c","awd_dyno","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","csv","result","lines","split","headers","map","h","trim","data","slice","filter","line","length","values","row","forEach","header","index","_values$index","rpm","parseInt","maf","parseFloat","load","console","log","readAsText","sendToBackend","formData","FormData","append","response","fetch","method","body","ok","backendResults","json","peaks","dataPointCount","error","status","statusText","errorText","text","runVirtualDyno","alert","_detailData$dataPoint","_detailData$dataPoint2","_processedData$find","_processedData$find2","_backendResults$peaks","_backendResults$peaks2","_backendResults$peaks3","_backendResults$peaks4","detailResponse","id","detailData","dataPoints","Object","keys","processedData","point","massAirflow","MassAirflow","boost","Boost","dyno","tempCorrection","Math","sqrt","humidityCorrection","altitudeCorrection","envCorrection","random","Rpm","hp","horsepower","Horsepower","torque","Torque","Load","backendHP","backendTorque","i","prev","currentPoint","Promise","resolve","setTimeout","maxHP","max","d","maxTorque","maxHPRpm","find","p","maxTorqueRpm","backendMaxHP","maxHorsepower","backendMaxTorque","backendMaxHPRpm","maxHorsepowerRpm","backendMaxTorqueRpm","settings","fileName","resetDyno","currentData","className","children","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","ref","onClick","current","click","value","entries","key","min","toFixed","style","width","disabled","_c","$RefreshReg$"],"sources":["C:/Users/tyler/OneDrive/Desktop/VirtualDyno/virtual-dyno-frontend/src/VirtualDyno.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './VirtualDyno.css';\r\n\r\n// Virtual Dyno Room that processes REAL user CSV files\r\nconst VirtualDyno = () => {\r\n  const [csvFile, setCsvFile] = useState(null);\r\n  const [csvData, setCsvData] = useState([]);\r\n  const [dynoResults, setDynoResults] = useState(null);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [currentDataPoint, setCurrentDataPoint] = useState(0);\r\n  const [selectedCar, setSelectedCar] = useState('mazdaspeed3');\r\n  const [virtualDynoSettings, setVirtualDynoSettings] = useState({\r\n    dynoType: 'mustang_md250',\r\n    temperature: 75,\r\n    humidity: 45,\r\n    altitude: 500\r\n  });\r\n  const fileInputRef = useRef(null);\r\n\r\n  // Dyno characteristics (no heat soak)\r\n  const dynoTypes = {\r\n    mustang_md250: {\r\n      name: \"Mustang MD250 (Load Bearing)\",\r\n      correction: 1.0,\r\n      variance: 0.02\r\n    },\r\n    dynojet_248c: {\r\n      name: \"DynoJet 248C (Inertial)\", \r\n      correction: 1.15,\r\n      variance: 0.03\r\n    },\r\n    awd_dyno: {\r\n      name: \"AWD Dyno (All-Wheel)\",\r\n      correction: 0.95,\r\n      variance: 0.04\r\n    }\r\n  };\r\n\r\n  // Parse uploaded CSV file\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n    \r\n    setCsvFile(file);\r\n    \r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      const csv = e.target.result;\r\n      const lines = csv.split('\\n');\r\n      const headers = lines[0].split(',').map(h => h.trim());\r\n      \r\n      const data = lines.slice(1)\r\n        .filter(line => line.trim().length > 0)\r\n        .map(line => {\r\n          const values = line.split(',');\r\n          const row = {};\r\n          headers.forEach((header, index) => {\r\n            row[header] = values[index]?.trim();\r\n          });\r\n          return row;\r\n        })\r\n        .filter(row => {\r\n          // Filter for valid dyno data (like your C# backend does)\r\n          const rpm = parseInt(row['RPM (RPM)'] || row['RPM'] || row['Engine Speed']);\r\n          const maf = parseFloat(row['Mass Airflow (g/s)'] || row['MAF'] || row['Mass Airflow']);\r\n          const load = parseFloat(row['Calculated Load (Load)'] || row['Load'] || row['Engine Load']);\r\n          \r\n          return rpm > 2000 && maf > 5 && load > 0.15;\r\n        });\r\n      \r\n      setCsvData(data);\r\n      console.log(`Loaded ${data.length} valid data points from CSV`);\r\n    };\r\n    \r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Send to your C# backend and return results\r\n  const sendToBackend = async () => {\r\n    if (!csvFile) return null;\r\n    \r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('File', csvFile);\r\n      formData.append('CarPresetKey', selectedCar);\r\n      formData.append('Weight', '3200');\r\n      formData.append('Gear', '4');\r\n      formData.append('Notes', `Virtual dyno: ${virtualDynoSettings.dynoType}, ${virtualDynoSettings.temperature}°F`);\r\n      formData.append('IsPublic', 'false');\r\n      \r\n      console.log('Sending CSV to C# backend...');\r\n      const response = await fetch('http://localhost:5038/api/dyno/upload', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const backendResults = await response.json();\r\n        console.log('✅ C# Backend Results:', backendResults);\r\n        console.log('Backend peaks:', backendResults.peaks);\r\n        console.log('Backend dataPointCount:', backendResults.dataPointCount);\r\n        return backendResults;\r\n      } else {\r\n        console.error('Backend API error:', response.status, response.statusText);\r\n        const errorText = await response.text();\r\n        console.error('Error response:', errorText);\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to connect to C# backend:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Run virtual dyno using YOUR C# backend for calculations\r\n  const runVirtualDyno = async () => {\r\n    if (!csvData.length) {\r\n      alert('Please upload a CSV file first!');\r\n      return;\r\n    }\r\n    \r\n    setIsRunning(true);\r\n    setCurrentDataPoint(0);\r\n    \r\n    try {\r\n      // 1. Send real CSV to YOUR C# backend for processing\r\n      const backendResults = await sendToBackend();\r\n      \r\n      if (!backendResults) {\r\n        alert('Could not connect to backend API. Make sure your C# API is running on localhost:5038');\r\n        setIsRunning(false);\r\n        return;\r\n      }\r\n      \r\n      console.log('Backend response structure:', backendResults);\r\n      \r\n      // 2. Get the official datapoints from YOUR backend\r\n      const detailResponse = await fetch(`http://localhost:5038/api/dyno/runs/${backendResults.id}`);\r\n      \r\n      if (!detailResponse.ok) {\r\n        console.error('Failed to get detailed run data:', detailResponse.status);\r\n        setIsRunning(false);\r\n        return;\r\n      }\r\n      \r\n      const detailData = await detailResponse.json();\r\n      console.log('🔍 Detail data structure:', detailData);\r\n      console.log('🔍 First data point:', detailData.dataPoints?.[0]);\r\n      console.log('🔍 Data point properties:', Object.keys(detailData.dataPoints?.[0] || {}));\r\n      \r\n      // 3. Apply virtual dyno characteristics to YOUR calculated results\r\n      const processedData = (detailData.dataPoints || []).map((point, index) => {\r\n        // Debug logging for first few points\r\n        if (index < 3) {\r\n          console.log(`🔍 Point ${index}:`, point);\r\n          console.log(`🔍 Available properties:`, Object.keys(point));\r\n          console.log(`🔍 MAF check: massAirflow=${point.massAirflow}, MassAirflow=${point.MassAirflow}`);\r\n          console.log(`🔍 Boost check: boost=${point.boost}, Boost=${point.Boost}`);\r\n        }\r\n        \r\n        // Use YOUR backend's calculations as base, apply dyno characteristics\r\n        const dyno = dynoTypes[virtualDynoSettings.dynoType];\r\n        \r\n        // Environmental effects\r\n        const tempCorrection = Math.sqrt(537.67 / (virtualDynoSettings.temperature + 459.67));\r\n        const humidityCorrection = 1 - (virtualDynoSettings.humidity / 100 * 0.047);\r\n        const altitudeCorrection = 1 - (virtualDynoSettings.altitude * 0.000035);\r\n        const envCorrection = tempCorrection * humidityCorrection * altitudeCorrection;\r\n        \r\n        // Dyno type correction and variance\r\n        const variance = 1 + (Math.random() - 0.5) * 2 * dyno.variance;\r\n        \r\n        return {\r\n          rpm: point.rpm || point.Rpm || 0,\r\n          hp: (point.horsepower || point.Horsepower || 0) * envCorrection * dyno.correction * variance,\r\n          torque: (point.torque || point.Torque || 0) * envCorrection * variance,\r\n          boost: point.boost || point.Boost || 0,\r\n          maf: point.massAirflow || point.MassAirflow || 0,\r\n          load: point.load || point.Load || 0,\r\n          backendHP: point.horsepower || point.Horsepower || 0,\r\n          backendTorque: point.torque || point.Torque || 0\r\n        };\r\n      });\r\n      \r\n      // 4. Animate the virtual dyno run\r\n      for (let i = 0; i < processedData.length; i++) {\r\n        setCurrentDataPoint(i);\r\n        // Show current point during animation\r\n        if (i < processedData.length) {\r\n          setDynoResults(prev => ({\r\n            ...prev,\r\n            currentPoint: processedData[i]\r\n          }));\r\n        }\r\n        await new Promise(resolve => setTimeout(resolve, 150));\r\n      }\r\n      \r\n      // 5. Calculate final peaks from virtual dyno\r\n      const peaks = {\r\n        maxHP: processedData.length > 0 ? Math.max(...processedData.map(d => d.hp || 0)) : 0,\r\n        maxTorque: processedData.length > 0 ? Math.max(...processedData.map(d => d.torque || 0)) : 0,\r\n        maxHPRpm: processedData.find(d => d.hp === Math.max(...processedData.map(p => p.hp || 0)))?.rpm || 0,\r\n        maxTorqueRpm: processedData.find(d => d.torque === Math.max(...processedData.map(p => p.torque || 0)))?.rpm || 0,\r\n        // Also include YOUR backend's original peaks for comparison\r\n        backendMaxHP: backendResults.peaks?.maxHorsepower || 0,\r\n        backendMaxTorque: backendResults.peaks?.maxTorque || 0,\r\n        backendMaxHPRpm: backendResults.peaks?.maxHorsepowerRpm || 0,\r\n        backendMaxTorqueRpm: backendResults.peaks?.maxTorqueRpm || 0\r\n      };\r\n      \r\n      setDynoResults({\r\n        processedData,\r\n        peaks,\r\n        settings: virtualDynoSettings,\r\n        fileName: csvFile.name,\r\n        backendResults // Store original backend results\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error('Error running virtual dyno:', error);\r\n      alert('Error connecting to backend API. Make sure your C# API is running.');\r\n    } finally {\r\n      setIsRunning(false);\r\n    }\r\n  };\r\n\r\n  // Reset dyno results\r\n  const resetDyno = () => {\r\n    setDynoResults(null);\r\n    setCurrentDataPoint(0);\r\n  };\r\n\r\n  const currentData = dynoResults?.currentPoint || (dynoResults?.processedData && dynoResults.processedData[currentDataPoint]);\r\n\r\n  return (\r\n    <div className=\"virtual-dyno-container\">\r\n      <h1 className=\"virtual-dyno-title\">🏁 Virtual Dyno Experience - Powered by Your C# Backend</h1>\r\n      \r\n      <div className=\"backend-status-alert\">\r\n        <strong>⚙️ Make sure your C# backend is running:</strong> <code>cd VirtualDyno.API && dotnet run</code>\r\n      </div>\r\n      \r\n      <div className=\"dyno-main-grid\">\r\n        \r\n        {/* File Upload */}\r\n        <div className={`file-upload-section ${csvFile ? 'has-file' : ''}`}>\r\n          <h3 className=\"file-upload-title\">📁 Upload Your Datalog</h3>\r\n          <input \r\n            type=\"file\" \r\n            accept=\".csv\"\r\n            onChange={handleFileUpload}\r\n            ref={fileInputRef}\r\n            className=\"hidden\"\r\n          />\r\n          <button \r\n            onClick={() => fileInputRef.current.click()}\r\n            className=\"file-upload-button\"\r\n          >\r\n            {csvFile ? '✅ Change File' : '📂 Select CSV File'}\r\n          </button>\r\n          \r\n          {csvFile && (\r\n            <div className=\"file-info\">\r\n              <p><strong>File:</strong> {csvFile.name}</p>\r\n              <p><strong>Data Points:</strong> {csvData.length}</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Virtual Dyno Settings */}\r\n        <div className=\"settings-panel\">\r\n          <h3 className=\"settings-title\">🚗 Vehicle Selection</h3>\r\n          \r\n          <label className=\"settings-label\">Select Car:</label>\r\n          <select \r\n            value={selectedCar}\r\n            onChange={(e) => {\r\n              setSelectedCar(e.target.value);\r\n              setDynoResults(null); // Clear previous results\r\n              resetDyno(); // Reset session\r\n            }}\r\n            className=\"settings-select\"\r\n          >\r\n            <option value=\"mazdaspeed3\">Mazdaspeed3</option>\r\n            <option value=\"wrx\">Subaru WRX</option>\r\n            <option value=\"gti\">VW GTI</option>\r\n            <option value=\"focus_st\">Ford Focus ST</option>\r\n          </select>\r\n\r\n          <h3 className=\"settings-title\">🔧 Dyno Settings</h3>\r\n          \r\n          <label className=\"settings-label\">Dyno Type:</label>\r\n          <select \r\n            value={virtualDynoSettings.dynoType}\r\n            onChange={(e) => setVirtualDynoSettings(prev => ({\r\n              ...prev, dynoType: e.target.value\r\n            }))}\r\n            className=\"settings-select\"\r\n          >\r\n            {Object.entries(dynoTypes).map(([key, dyno]) => (\r\n              <option key={key} value={key}>{dyno.name}</option>\r\n            ))}\r\n          </select>\r\n          \r\n          <label className=\"settings-label\">Temperature: {virtualDynoSettings.temperature}°F</label>\r\n          <input \r\n            type=\"range\" \r\n            min=\"50\" \r\n            max=\"110\" \r\n            value={virtualDynoSettings.temperature}\r\n            onChange={(e) => setVirtualDynoSettings(prev => ({\r\n              ...prev, temperature: parseInt(e.target.value)\r\n            }))}\r\n            className=\"settings-range\"\r\n          />\r\n          \r\n          <label className=\"settings-label\">Humidity: {virtualDynoSettings.humidity}%</label>\r\n          <input \r\n            type=\"range\" \r\n            min=\"10\" \r\n            max=\"90\" \r\n            value={virtualDynoSettings.humidity}\r\n            onChange={(e) => setVirtualDynoSettings(prev => ({\r\n              ...prev, humidity: parseInt(e.target.value)\r\n            }))}\r\n            className=\"settings-range\"\r\n          />\r\n          \r\n          <p className=\"settings-info\"><strong>Selected Car:</strong> {selectedCar}</p>\r\n          <p className=\"settings-info\"><strong>Dyno Correction:</strong> {dynoTypes[virtualDynoSettings.dynoType].correction}x</p>\r\n        </div>\r\n\r\n        {/* Live Dyno Display */}\r\n        <div className={`dyno-display-panel ${isRunning ? 'running' : ''}`}>\r\n          <h3 className=\"dyno-display-title\">{isRunning ? 'PROCESSING...' : 'Virtual Dyno'}</h3>\r\n          \r\n          {isRunning && currentData && (\r\n            <div className=\"live-dyno-reading\">\r\n              <div className=\"live-rpm\">\r\n                {currentData.rpm || 0} RPM\r\n              </div>\r\n              <div className=\"live-power\">\r\n                {(currentData.hp || 0).toFixed(1)} HP | {(currentData.torque || 0).toFixed(1)} lb-ft\r\n              </div>\r\n              <div className=\"live-details\">\r\n                Boost: {(currentData.boost || 0).toFixed(1)} PSI | MAF: {(currentData.maf || 0).toFixed(1)} g/s\r\n              </div>\r\n              <div className=\"progress-bar-container\">\r\n                <div className=\"progress-bar\" style={{ \r\n                  width: `${csvData.length > 0 ? (currentDataPoint / csvData.length) * 100 : 0}%`\r\n                }}></div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {dynoResults && !isRunning && (\r\n            <div className=\"results-display\">\r\n              <h4 className=\"results-title\">🏆 Virtual Dyno Results</h4>\r\n              <div className=\"virtual-results\">\r\n                <p><strong>{(dynoResults.peaks?.maxHP || 0).toFixed(1)} HP</strong> @ {dynoResults.peaks?.maxHPRpm || 'N/A'} RPM</p>\r\n                <p><strong>{(dynoResults.peaks?.maxTorque || 0).toFixed(1)} lb-ft</strong> @ {dynoResults.peaks?.maxTorqueRpm || 'N/A'} RPM</p>\r\n                <p className=\"results-meta\">\r\n                  Dyno: {dynoTypes[dynoResults.settings?.dynoType]?.name || 'Unknown'}<br/>\r\n                  Temp: {dynoResults.settings?.temperature || 'N/A'}°F, Humidity: {dynoResults.settings?.humidity || 'N/A'}%<br/>\r\n                  Altitude: {dynoResults.settings?.altitude || 'N/A'}ft\r\n                </p>\r\n              </div>\r\n              \r\n              {dynoResults.peaks?.backendMaxHP && (\r\n                <div className=\"backend-results\">\r\n                  <strong>🧮 Your C# Backend Results:</strong><br/>\r\n                  {(dynoResults.peaks.backendMaxHP || 0).toFixed(1)} HP @ {dynoResults.peaks?.backendMaxHPRpm || 'N/A'} RPM<br/>\r\n                  {(dynoResults.peaks.backendMaxTorque || 0).toFixed(1)} lb-ft @ {dynoResults.peaks?.backendMaxTorqueRpm || 'N/A'} RPM<br/>\r\n                  <em>(Before virtual dyno effects)</em>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {!isRunning && !dynoResults && csvData.length > 0 && (\r\n            <div className=\"status-ready\">\r\n              <p><strong>Ready to Run!</strong></p>\r\n              <p>CSV loaded with {csvData.length} data points</p>\r\n              <p>Click \"START VIRTUAL DYNO\" to process with your C# backend</p>\r\n            </div>\r\n          )}\r\n          \r\n          {!isRunning && !dynoResults && csvData.length === 0 && (\r\n            <div className=\"status-waiting\">\r\n              <p>Upload a CSV file to get started</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Control Buttons */}\r\n      <div className=\"controls-section\">\r\n        <button \r\n          onClick={runVirtualDyno}\r\n          disabled={!csvData.length || isRunning}\r\n          className=\"btn-primary\"\r\n        >\r\n          {isRunning ? '🏃 PROCESSING...' : `🚀 START VIRTUAL DYNO`}\r\n        </button>\r\n        \r\n        {dynoResults && !isRunning && (\r\n          <button \r\n            onClick={resetDyno}\r\n            className=\"btn-tertiary\"\r\n          >\r\n            🔄 Reset\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {/* Instructions */}\r\n      <div className=\"instructions-panel\">\r\n        <h4 className=\"instructions-title\">🎮 How to Use Your Virtual Dyno:</h4>\r\n        <ol className=\"instructions-list\">\r\n          <li><strong>Upload your real CSV datalog</strong> (AccessPort, Cobb, MHD, etc.)</li>\r\n          <li><strong>Choose dyno type</strong> - Different dynos read differently</li>\r\n          <li><strong>Set environmental conditions</strong> - Hot weather = less power</li>\r\n          <li><strong>Watch your data process through the virtual dyno</strong> - Real-time simulation</li>\r\n          <li><strong>Compare results</strong> - See how different dynos would read your run</li>\r\n        </ol>\r\n        \r\n        <p><strong>🎯 This uses YOUR C# backend calculations</strong> with virtual dyno simulation!</p>\r\n        \r\n        <div className=\"tech-flow\">\r\n          <strong>🔧 Technical Flow:</strong><br/>\r\n          1. Upload real CSV → 2. Send to C# backend → 3. Get your calculations → 4. Apply virtual dyno effects → 5. Immersive experience\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VirtualDyno;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}